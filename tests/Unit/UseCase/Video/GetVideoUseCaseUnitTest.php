<?php

namespace Tests\Unit\UseCase\Video;

use Core\Domain\Entity\Video;
use Core\Domain\Enum\Rating;
use Core\Domain\Repository\VideoRepositoryInterface;
use Core\UseCase\Video\Get\Dto\{
    GetVideoInputDto,
    GetVideoOutputDto
};
use Core\UseCase\Video\Get\GetVideoUseCase;
use PHPUnit\Framework\TestCase;
use Mockery;
use Ramsey\Uuid\Uuid;
use stdClass;
use Core\Domain\ValueObject\Uuid as VOUuid;

class GetVideoUseCaseUnitTest extends TestCase
{
    public function test_list()
    {
        $uuid = Uuid::uuid4()->toString();
        $useCase = new GetVideoUseCase(
            repository: $this->createMockRepository($uuid)
        );
        $output = $useCase->execute(input: $this->createMockInputDto(id: $uuid));
        $this->assertInstanceOf(GetVideoOutputDto::class, $output);
        $this->assertEquals($uuid, $output->id);
        $this->assertEquals("Title do video", $output->title);
        $this->assertEquals("Description of video", $output->description);
    }

    protected function createMockRepository(string $id)
    {
        $repository = Mockery::mock(stdClass::class, VideoRepositoryInterface::class);
        $repository->shouldReceive('findById')
            ->once()
            ->andReturn($this->createEntity(id: $id));
        return $repository;
    }

    protected function createMockInputDto(string $id)
    {
        return Mockery::mock(GetVideoInputDto::class, [
            $id
        ]);
    }

    protected function createEntity($id)
    {
        return new Video(
            title: "Title do video",
            description: "Description of video",
            yearLaunched: 2021,
            duration: 10,
            opened: true,
            rating: Rating::L,
            id: new VOUuid($id),
        );
    }

    protected function tearDown(): void
    {
        Mockery::close();
        parent::tearDown(); // TODO: Change the autogenerated stub
    }
}
